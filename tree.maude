fmod LIST-CONS{X :: TRIV} is
 protecting NAT .
 sorts NeList{X} List{X} .
 subsort NeList{X} < List{X} .
 op [] : -> List{X} [ctor] .
 op _:_ : X$Elt List{X} -> NeList{X} [ctor] .
 op tail : NeList{X} -> List{X} .
 op head : NeList{X} -> X$Elt .
 var E : X$Elt .
 var N : Nat .
 vars L L’ : List{X} .
 eq tail(E : L) = L .
 eq head(E : L) = E .
 op _++_ : List{X} List{X} -> List{X} .
 op length : List{X} -> Nat .
 op reverse : List{X} -> List{X} .
 eq [] ++ L = L .
 eq (E : L) ++ L’ = E : (L ++ L’) .
 eq length([]) = 0 .
 eq length(E : L) = 1 + length(L) .
 eq reverse([]) = [] .
 eq reverse(E : L) = reverse(L) ++ (E : []) .
 op take_from_ : Nat List{X} -> List{X} .
 op throw_from_ : Nat List{X} -> List{X} .
 eq take 0 from L = [] .
 eq take N from [] = [] .
 eq take s N from (E : L) = E : take N from L .
 eq throw 0 from L = L .
 eq throw N from [] = [] .
 eq throw s N from (E : L) = throw N from L .
endfm

fmod GEN-TREE{X :: TRIV} is
 protecting LIST-CONS{X} .

 sorts Tree{X} Forest{X} .

 op _[_] : X$Elt Forest{X} -> Tree {X} [ctor] .
 op empty-forest : -> Forest {X} [ctor] .
 op _:_ : Tree{X} Forest{X} -> Forest{X} [ctor] .
 
 op root : Tree{X} -> X$Elt .
 op children : Tree{X} -> Forest{X} .
 op #children : Tree{X} -> Nat .

 op length : Forest {X} -> Nat .
 op leaf? : Tree {X} -> Bool .

 var E : X$Elt .
 var T : Tree{X} .
 var F : Forest{X} .

 eq root (E [F]) = E .
 eq children (E [F]) = F .

 eq length(empty-forest) = 0 .
 eq length(T : F) = 1 + length(F) .
 eq #children(E [F]) = length(F) .
 eq leaf?(T) = #children(T) == 0 .

 ops depth degree : Tree{X} -> Nat .
 ops depth-forest degree-forest : Forest{X} -> Nat .
 eq depth(E [F]) = 1 + depth-forest(F) .
 eq depth-forest(empty-forest) = 0 .
 eq depth-forest(T : F) = max(depth(T), depth-forest(F)) .
 eq degree(E [F]) = max(length(F), degree-forest(F)) .
 eq degree-forest(empty-forest) = 0 .
 eq degree-forest(T : F) = max(degree(T), degree-forest(F)) .

 ops preorder postorder : Tree{X} -> List{X} .
 ops preorder-forest postorder-forest : Forest{X} -> List{X} .
 eq preorder(E [F]) = E : preorder-forest(F) .
 eq preorder-forest(empty-forest) = [] .
 eq preorder-forest(T : F) = preorder(T) ++ preorder-forest(F) .
 eq postorder(E [F]) = postorder-forest(F) ++ (E : []) .
 eq postorder-forest(empty-forest) = [] .
 eq postorder-forest(T : F) = postorder(T) ++ postorder-forest(F) .

endfm

fmod tree is
 protecting GEN-TREE{Int} .
endfm