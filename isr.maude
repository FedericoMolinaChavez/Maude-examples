fmod NAT-MIXFIX is
 sort Natural .
 op 0 : -> Natural [ctor] .
 op s : Natural -> Natural [ctor] .
 op _+_ : Natural Natural -> Natural .
 op _*_ : Natural Natural -> Natural .
 vars N M : Natural .
 eq N + 0 = N .
 eq N + s(M) = s(N + M) .
 eq N * 0 = 0 .
 eq N * s(M) = N + (N * M) .
endfm

fmod NAT-FUns is
 protecting NAT-MIXFIX .
 protecting BOOL .

 op _^_ : Natural Natural -> Natural . *** exponentiation
 op fact : Natural -> Natural .        *** factorial 
 op _~_ : Natural Natural -> Bool .     *** equality predicate
 

 vars N M : Natural .
 
 eq N ^ 0 = s(0) .
 eq N ^ s(M) = N * (N ^ M) .
 
 eq fact(0) = s(0) .
 eq fact(s(N)) = s(N) * fact (N) .

 eq 0 ~ 0 = true .
 eq N ~ 0 = false .
 eq 0 ~ M = false .
 eq s(N) ~ s(M) = N ~ M .  
 endfm

fmod NAT-LIST is
 protecting NAT-MIXFIX .
 inc NAT-FUns .
 sort List .
 subsort Natural < List .
 op nil : -> List [ctor] .
 op _;_ : Natural List -> List [ctor] .
 op length : List -> Natural .
 var N : Natural .
 var L : List .
 eq length(nil) = 0 .
 eq length(N ; L) = s(length(L)) .
endfm

fmod LIST-FUNS is
 protecting NAT-LIST .
 protecting BOOL .

 op _@_ : List List -> List .	*** list append
 op rev : List -> List .		*** list reverse
 op compact : List -> Bool .	*** compact predicate

 vars N M : Natural .
 vars L Q : List .

 eq nil @ Q = Q .
 eq (L ; N) @ Q = L @ (N ; Q) .

 eq rev(nil) = nil .
 eq rev(N ; L) = rev(L) ; N .

 ceq compact (N ; M ; L) = false if (N ~ M == true) .
 ceq compact (N ; M ; L) = compact(L) if (N ~ M == false) .
 eq compact (nil) = true .


endfm